from flask import redirect, url_for, jsonify, request, render_template
from werkzeug.utils import secure_filename
from app.app_config import get_response, create_app
from services.storage.storage_service import load_document_blod
from services.persistence.database_service import store_collection
from services.document_service import read_document, save_document, search_documents
from services.AI.AI_Service import LLMCLIENT
from services.AI.openvision_service import analysis_image
from app.page_uploadfile import UploadFileForm, call_service_load_document, call_service_analize_image
import base64


import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = create_app()


@app.route('/assistant/analize_image', methods=['POST'])
def command_analize_image():

    try:
        data = request.get_json(force=True)
        print(data)

        if not data:
            return get_response('JSON body is required', 400) 

        if not data['file'] or not data['fileName'] or not data['title']:
            return get_response('fileName, file and title are required', 400) 

        filename = secure_filename(data['fileName'])
        bytes_file = base64.b64decode(data['file'])

        #store blod
        load_document_blod(filename, bytes_file)

        #analysis image 
        text_from_image = analysis_image(filename)
        
        #store vectorial database
        #store_collection('images_collection', ['id1'], [''], bytes_file)
        #store_collection('images_collection', ['id1'], [''], bytes_file.decode("utf8"))

        ai_client = LLMCLIENT()
        prompt = f"""you are an assistant for a blind person, your task is to help and be friendly. "
                    you should help with the next requirement: {data['prompt']}
                    and you are currently seeing the next: {text_from_image}"""

        print(f"prompt {prompt}") 

        response = ai_client.chat(prompt)    
        #response = f"prompt {prompt}"
    except Exception as error:
        response = f"An exception occurred:{error} "

    return get_response(response, 200)


@app.route('/assistant/load_document', methods=['POST'])
def command_load_document():

    try:
        data = request.get_json(force=True)
        #print(data)

        if not data:
            return get_response('JSON body is required', 400) 

        if not data['file'] or not data['fileName'] or not data['title']:
            return get_response('fileName, file and title are required', 400) 

        filename = secure_filename(data['fileName'])
        bytes_file = base64.b64decode(data['file'])

        #store blod
        load_document_blod(filename, bytes_file)

        #analysis image 
        url, text_document = read_document(filename)
        print("#save_document")
        save_document(filename, url, text_document)
          
        response = f"document save {filename}"

    except Exception as error:
        response = f"An exception occurred:{error} "

    #print('success')
    response = {'message': response}
    return response, 200


@app.route('/assistant/prompt', methods=['POST'])
def prompt():

    data = request.get_json(force=True)

    if not data:
        return get_response('JSON body is required', 400) 

    if not data['prompt']:
        return get_response('prompt are required', 400) 

    ai_client = LLMCLIENT()
    response = ai_client.chat(data['prompt'])    

    #print('success')
    response = {'message': response}
    #return jsonify(response), 200
    return response, 200


@app.route('/assistant/prompt_messages', methods=['POST'])
def prompt_messages():

    try:
        data = request.get_json(force=True)

        if not data:
            return get_response('JSON body is required', 400) 

        if not data['messages']:
            return get_response('messages are required', 400) 


        ai_client = LLMCLIENT()

        print(data['messages'])

        response = ai_client.chat_messages(data['messages'])    

        response = {'message': response}
        return get_response(response, 200)
    
    except Exception as error:
        response = f"An exception occurred:{error} "
        return get_response(response, 200)


@app.route('/assistant/prompt_search', methods=['POST'])
def prompt_search():

    data = request.get_json(force=True)

    if not data:
        return get_response('JSON body is required', 400) 

    if not data['messages']:
        return get_response('messages are required', 400) 

    if not data['search_text']:
        return get_response('search_text is required', 400) 

    result = search_documents(data['search_text'])
    content_text = ""
    for(index, row) in result.iterrows():
        print(row['Content'])
        content_text = content_text + row['Content']

    ai_client = LLMCLIENT()
    response = ai_client.chat_messages(data['prompt'] + content_text)    

    #print('success')
    response = {'message': response}
    #return jsonify(response), 200
    return response, 200


@app.route('/', methods=['GET', 'POST'])
@app.route('/client', methods=['GET', 'POST'])
def client():
    form = UploadFileForm()

    if request.method == 'POST':
        if form.validate_on_submit():
            file = form.file.data
            response = call_service_load_document(request.base_url, secure_filename(file.filename), file.read(), request.form.get("title"))
            #return redirect(url_for('success',result = response))
            return response
        
    app.logger.info('render index.html %s', request.base_url)

    return render_template('index.html', form=form)


@app.route('/success/<result>')
def success(result):
   return result


if __name__ == '__main__':
   app.run(host='0.0.0.0', port=8000, debug=True)
